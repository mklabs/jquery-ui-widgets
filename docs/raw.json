{"majorversion": 3, "filemap": {"testCase.js": {"classlist": [], "name": "testCase.js", "module": "controller"}, "table.js": {"classlist": ["wt.controller.LogMyRow"], "name": "table.js", "module": "controller"}, "ui.controller.js": {"classlist": ["Class", "SandBox", "BaseController", "$.ui.controller"], "name": "ui.controller.js", "module": "controller"}}, "modules": {"controller": {"description": "The Controller widget module provides clean and handy way to organize your jQuery code.", "submodules": [], "classlist": ["Class", "SandBox", "BaseController", "$.ui.controller"], "author": "mdaniel", "filelist": ["ui.controller.js", "testCase.js", "table.js"], "subdata": {}, "name": "controller"}, "table-controller": {"description": "Controller of main table page. <br />\nDeal with user interaction such as mouseover and row selection, so as to buttons binding.", "submodules": [], "classlist": ["wt.controller.LogMyRow"], "filelist": [], "subdata": {}, "name": "table-controller"}}, "classmap": {"$.ui.controller": {"name": "$.ui.controller", "constructors": [{"description": "Widget implentation of controllers. <br />\nDoes a few things:\n<ul>\n<li>\nAt this point, controller instance is already created and provided \nby the proxy controller.\n</li>\n<li>\nInit model by walking through hidden inputs in controller container \nand make it available to use via this.Model\n</li>\n<li>Setup event delegation restricted to controller container.</li>\n</ul>"}], "namespace": "$.ui", "module": "controller", "methods": {"_initEvents": {"private": "", "description": "Setup event delegation restricted to the controller container.\nEach eventHandler is given a context (thanks to $.proxy method) that matchs the correct instance. This means that you could use something \nlike this.doThing() in there. The original or current target are still available in Event object passed in as parameter.", "guessedname": "_initEvents", "guessedtype": "function"}, "_initModel": {"private": "", "description": "Init model by walking through hidden inputs within controller container \nand make it available to use via this.Model", "guessedname": "_initModel", "guessedtype": "function"}, "_unbindEvents": {"private": "", "description": "FIXME: TDB\nRemoves any event handlers fir this particular component.", "guessedname": "_unbindEvents", "guessedtype": "function"}, "_createInstance": {"params": [{"type": "Object", "name": "baseController", "description": ""}, {"type": "Object", "name": "prototype", "description": ""}], "description": "Internal use only.\nDoes three things:\n<ul>\n<li>Extends the baseController and create a fresh a new instance.</li>\n<li>\nStores a reference of newly created instance in an internal controllers cache \n(with some metadata, namely used selector and base Class)</li>\n<li>Setup error handling in controllers instance.</li>\n</ul>\nFIXME: Prevent multiple instantiation of same controller. \nWill have to check in cache first.", "private": ""}, "_init": {"private": "", "description": "Controller method. Setup instance in widget ones, init model and events.", "guessedname": "_init", "guessedtype": "function"}, "destroy": {"description": "Delegated destroy method from widget's prototype.\nRemove any delegated event handlers, call the controller's destroy \nmethod and widget's super one.", "guessedname": "destroy", "guessedtype": "function"}}, "file": "ui.controller.js", "shortname": "controller", "description": "Widget implentation of controllers. <br />\nDoes a few things:\n<ul>\n<li>\nAt this point, controller instance is already created and provided \nby the proxy controller.\n</li>\n<li>\nInit model by walking through hidden inputs in controller container \nand make it available to use via this.Model\n</li>\n<li>Setup event delegation restricted to controller container.</li>\n</ul>"}, "SandBox": {"name": "SandBox", "namespace": "", "module": "controller", "guessedname": "SandBox", "methods": {"getController": {"return": {"type": "BaseController", "description": "controller instance"}, "params": [{"type": "String", "name": "id", "description": ""}], "description": "Allow you to retrieve a specific controller from the internal cache", "guessedname": "getController", "guessedtype": "function"}}, "static": "", "file": "ui.controller.js", "guessedtype": "function", "shortname": "SandBox", "description": "SandBox Singleton available in any controllers instance. <br />\nThe sandbox is provided to you through parameters in your module impementation:\n<code>\n$(\".myController\").controller(function(sandbox){\n// Some code\n});"}, "wt.controller.LogMyRow": {"name": "wt.controller.LogMyRow", "constructors": [{"description": "Just for logging purpose. We make sure to call the super one."}], "namespace": "wt.controller", "module": "table-controller", "methods": {"doCommonStuff": {"description": "Dummy method.", "guessedname": "doCommonStuff", "guessedtype": "function"}}, "file": "table.js", "shortname": "LogMyRow", "description": "Just for fun. Here is a base class that TableController will extend."}, "Class": {"name": "Class", "namespace": "", "module": "controller", "file": "ui.controller.js", "shortname": "Class", "description": "Base Class.\nBased on jresig's implementaton (http://ejohn.org/blog/simple-javascript-inheritance/)\nAll subsequent controllers are inherited from BaseController which extend this Class."}, "BaseController": {"name": "BaseController", "constructors": [{"description": "Base Controller Class. All subsequent controller will inherit this one.\nProvides common interface for controllers communication."}], "namespace": "", "module": "controller", "guessedname": "BaseController", "extends": "Class", "superclass": "Class", "file": "ui.controller.js", "guessedtype": "property", "shortname": "BaseController", "description": "Base Controller Class. All subsequent controller will inherit this one.\nProvides common interface for controllers communication."}}, "version": "1.0", "namespaces": ["$.ui", "wt.controller"]}