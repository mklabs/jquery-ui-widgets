{"majorversion": 1, "filemap": {"ui.controller.js": {"classlist": ["Class", "SandBox", "BaseController", "$.ui.controller"], "name": "ui.controller.js", "module": "controller"}}, "modules": {"controller": {"description": "<b>jQuery UI Controller Widget</b> <br />\nA jQuery UI Widget that provides you clean and handy way to organize your jQuery code. Controllers organize \nevent handlers through the power of event delegation. If something happens in your application, either it is \nbrowser event or custom ones, a controller should respond to it.\n<ul>\n<li>Controllers let you know where your code is!</li>\n<li>Controllers force you to group events and label your html in specific ways.</li>\n<li>Controllers are inheritable.</li>\n<li>Controllers use event delegation.</li>\n</ul>", "submodules": [], "classlist": ["Class", "SandBox", "BaseController", "$.ui.controller"], "filelist": ["ui.controller.js"], "subdata": {}, "requires": "core, widet", "name": "controller"}}, "classmap": {"$.ui.controller": {"name": "$.ui.controller", "constructors": [{"params": [{"type": "BaseController", "name": "instance", "description": ""}], "description": "Controller method. Setup instance in widget ones, init model and events."}], "namespace": "$.ui", "module": "controller", "methods": {"_initEvents": {"private": "", "description": "Setup event delegation restricted to the controller container.\nEach eventHandler is given a context (thanks to $.proxy method) that matchs the correct instance. This means that you could use something \nlike this.doThing() in there. The original or current target are still available in Event object passed in as parameter.", "guessedname": "_initEvents", "guessedtype": "function"}, "_initModel": {"private": "", "description": "Init model by walking through hidden inputs within controller container \nand make it available to use via this.Model", "guessedname": "_initModel", "guessedtype": "function"}, "_unbindEvents": {"private": "", "description": "FIXME: TDB\nRemoves any event handlers fir this particular component.", "guessedname": "_unbindEvents", "guessedtype": "function"}, "_createInstance": {"params": [{"type": "Object", "name": "baseController", "description": ""}, {"type": "Object", "name": "prototype", "description": ""}], "description": "Internal use only.\nDoes three things:\n<ul>\n<li>Extends the baseController and create a fresh a new instance.</li>\n<li>\nStores a reference of newly created instance in an internal controllers cache \n(with some metadata, namely used selector and base Class)</li>\n<li>Setup error handling in controllers instance.</li>\n</ul>\nFIXME: Prevent multiple instantiation of same controller. \nWill have to check in cache first.", "private": ""}, "destroy": {"description": "Delegated destroy method from widget's prototype.\nRemove any delegated event handlers, call the controller's destroy \nmethod and widget's super one.", "guessedname": "destroy", "guessedtype": "function"}, "ns": {"params": [{"type": "String", "name": "name", "description": " Period separated list of namespaces to nest. MyClass.ns('foo.bar') makes MyClass['foo']['bar']."}, {"type": "Object", "name": "value", "description": " Set the contents of the deepest specified namespace to this value."}], "description": "Based on DUI's one.  <br />\nMake a namespace within a class.\nUsage 1: MyClass.ns('foo.bar');\nUsage 2: MyClass.ns('foo.bar', 'baz');", "private": ""}}, "file": "ui.controller.js", "shortname": "controller", "description": "Widget implementation of controllers. <br />\nDoes a few things:\n<ul>\n<li>\nAt this point, controller instance is already created and provided\nby the proxy controller.\n</li>\n<li>\nInit model by walking through hidden inputs in controller container\nand make it available to use via this.Model\n</li>\n<li>Setup event delegation restricted to controller container.</li>\n</ul>"}, "SandBox": {"name": "SandBox", "namespace": "", "module": "controller", "guessedname": "SandBox", "methods": {"getController": {"return": {"type": "BaseController", "description": "controller instance"}, "params": [{"type": "String", "name": "id", "description": ""}], "description": "Allow you to retrieve a specific controller from the internal cache", "guessedname": "getController", "guessedtype": "function"}}, "static": "", "file": "ui.controller.js", "guessedtype": "function", "shortname": "SandBox", "description": "SandBox Singleton available in any controllers instance. <br />\nThe sandbox is provided to you through parameters in your module impementation:\n<code>\n$(\".myController\").controller(function(sandbox){\n// Some code\n});"}, "Class": {"name": "Class", "namespace": "", "module": "controller", "file": "ui.controller.js", "shortname": "Class", "description": "Base Class.\nBased on jresig's implementaton (http://ejohn.org/blog/simple-javascript-inheritance/)\nAll subsequent controllers are inherited from BaseController which extend this Class."}, "BaseController": {"name": "BaseController", "constructors": [{"params": [{"type": "Object", "name": "container", "description": ""}], "description": "BaseController constructor. Setup empty Model and Elements."}], "namespace": "", "module": "controller", "guessedname": "BaseController", "methods": {"fire": {"params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Object", "name": "data", "description": ""}], "description": "Fire (Trigger) a custom event upon all registered controllers.", "guessedname": "fire", "guessedtype": "function"}, "listen": {"params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "handler", "description": ""}], "description": "Bind a custom event upon current instance.", "guessedname": "listen", "guessedtype": "function"}}, "extends": "Class", "superclass": "Class", "file": "ui.controller.js", "guessedtype": "property", "shortname": "BaseController", "description": "Base Controller Class. All subsequent controller will inherit this one.\nProvides common interface for controllers communication."}}, "version": "1.0.0", "namespaces": ["$.ui"]}