{"majorversion": 3, "filemap": {"simple.js": {"classlist": [], "name": "simple.js", "module": "controller"}, "bootstrap.js": {"classlist": [], "name": "bootstrap.js", "module": "bootstrap"}, "api.bootstrap.js": {"classlist": [], "name": "api.bootstrap.js", "module": "bootstrap"}, "init.js": {"classlist": ["demo.layout.InitLayout"], "name": "init.js", "module": "controller"}, "ui.controller.js": {"classlist": ["Class", "SandBox", "BaseController", "$.ui.controller"], "name": "ui.controller.js", "module": "bootstrap"}}, "modules": {"controller": {"description": "The Controller widget module provides clean and handy way \nto organize your jQuery code.", "submodules": [], "classlist": ["Class", "SandBox", "BaseController", "$.ui.controller"], "author": "mdaniel", "filelist": ["simple.js", "init.js"], "subdata": {}, "name": "controller"}, "bootstrap": {"description": "Bootstrap file.", "submodules": [], "classlist": [], "author": "mdaniel", "filelist": ["api.bootstrap.js", "bootstrap.js", "ui.controller.js"], "subdata": {}, "name": "bootstrap"}, "layout": {"description": "Controller responsible of main layout rendering and behaviour\n(jqGrid, tabs, layout).", "submodules": [], "classlist": ["demo.layout.InitLayout"], "filelist": [], "subdata": {}, "name": "layout"}}, "classmap": {"$.ui.controller": {"name": "$.ui.controller", "constructors": [{"description": "Widget implentation of controllers. <br />\nDoes a few things:\n<ul>\n<li>\nAt this point, controller instance is already created and provided \nby the proxy controller.\n</li>\n<li>\nInit model by walking through hidden inputs in controller container \nand make it available to use via this.Model\n</li>\n<li>Setup event delegation restricted to controller container.</li>\n</ul>"}], "namespace": "$.ui", "module": "controller", "methods": {"destroy": {"description": "Delegated destroy method from widget's prototype.\nRemove any delegated event handlers, call the controller's destroy \nmethod and widget's super one.", "guessedname": "destroy", "guessedtype": "function"}, "_initModel": {"private": "", "description": "Init model by walking through hidden inputs within controller container \nand make it available to use via this.Model", "guessedname": "_initModel", "guessedtype": "function"}, "_init": {"private": "", "description": "Controller method. Setup instance in widget ones, init model and events.", "guessedname": "_init", "guessedtype": "function"}, "_unbindEvents": {"private": "", "description": "FIXME: TDB\nRemoves any event handlers fir this particular component.", "guessedname": "_unbindEvents", "guessedtype": "function"}, "_initEvents": {"private": "", "description": "Setup event delegation restricted to the controller container.\nEach eventHandler is given a context (thanks to $.proxy method) that matchs the correct instance. This means that you could use something \nlike this.doThing() in there. The original or current target are still available in Event object passed in as parameter.", "guessedname": "_initEvents", "guessedtype": "function"}}, "file": "ui.controller.js", "shortname": "controller", "description": "Widget implentation of controllers. <br />\nDoes a few things:\n<ul>\n<li>\nAt this point, controller instance is already created and provided \nby the proxy controller.\n</li>\n<li>\nInit model by walking through hidden inputs in controller container \nand make it available to use via this.Model\n</li>\n<li>Setup event delegation restricted to controller container.</li>\n</ul>"}, "SandBox": {"name": "SandBox", "namespace": "", "module": "controller", "guessedname": "SandBox", "methods": {"getController": {"return": {"type": "BaseController", "description": "controller instance"}, "params": [{"type": "String", "name": "id", "description": ""}], "description": "Allow you to retrieve a specific controller from the internal cache", "guessedname": "getController", "guessedtype": "function"}}, "static": "", "file": "ui.controller.js", "guessedtype": "function", "shortname": "SandBox", "description": "SandBox Singleton available in any controllers instance. <br />\nThe sandbox is provided to you through parameters in your module impementation:\n<code>\n$(\".myController\").controller(function(sandbox){\n// Some code\n});"}, "Class": {"name": "Class", "namespace": "", "module": "controller", "file": "ui.controller.js", "shortname": "Class", "description": "Base Class.\nBased on jresig's implementaton (http://ejohn.org/blog/simple-javascript-inheritance/)\nAll subsequent controllers are inherited from BaseController which extend this Class."}, "demo.layout.InitLayout": {"name": "demo.layout.InitLayout", "namespace": "demo.layout", "module": "layout", "file": "init.js", "shortname": "InitLayout", "events": {"gridCompleteHandler": {"description": "event grid", "guessedname": "gridCompleteHandler", "guessedtype": "function"}}, "description": "Setup the layout and behvaiour of main page.\nInit the layout plugin."}, "BaseController": {"name": "BaseController", "constructors": [{"description": "Init method. Called each time a controller is destroyed \n(usually removed from the dom)."}], "namespace": "", "module": "controller", "guessedname": "BaseController", "methods": {"destroy": {"description": "Destroy method. Called each time a controller is destroyed \n(usually removed from the dom).\nBasically just delete container reference and re-init the model.\nElements are kept since are needed for events unbinding.", "guessedname": "destroy", "guessedtype": "function"}, "init": {"description": "Init method. Called each time a controller is destroyed \n(usually removed from the dom).", "guessedname": "init", "guessedtype": "function"}}, "extends": "Class", "superclass": "Class", "file": "ui.controller.js", "guessedtype": "property", "shortname": "BaseController", "description": "Base Controller Class. All subsequent controller will inherit this one.\nProvides common interface for controllers communication."}}, "version": "1.0", "namespaces": ["$.ui", "demo.layout"]}